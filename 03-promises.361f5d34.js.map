{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAK3C,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAZbR,EAAKgB,iBAAiB,UAgBtB,SAAiCC,GAC/BA,EAAMC,iBAEN,IAAIC,EAAaC,OAAOjB,EAAWkB,OAC/BC,EAAYF,OAAOhB,EAAUiB,OAC7BE,EAASH,OAAOf,EAAYgB,OAEhC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAChClB,EAAckB,EAAGL,GACdM,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBkB,EAAA5B,GAAS6B,OAAOC,QAAQ,uBAAqBrB,QAAiBC,MAAU,IAEzEqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBkB,EAAA5B,GAAS6B,OAAOG,QAAQ,sBAAoBvB,QAAeC,MAAU,IAGzEW,GAAcG,EAGhBtB,EAAK+B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayField = document.querySelector('input[name=\"delay\"]');\nconst stepField = document.querySelector('input[name=\"step\"]');\nconst amountField = document.querySelector('input[name=\"amount\"]');\n\n\nform.addEventListener('submit', onCreatePromiseBtnClick);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onCreatePromiseBtnClick(event) {\n  event.preventDefault();\n\n  let firstDelay = Number(delayField.value);\n  let delayStep = Number(stepField.value);\n  let amount = Number(amountField.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, firstDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  \n    firstDelay += delayStep;\n  }\n\n  form.reset();\n}\n\n  // Other version for our onCreatePromiseBtnClick function (between preventDefault and for loop)\n\n  // const formData = new FormData(event.currentTarget);\n  // const dataParams = {};\n\n  // for (const [key, value] of formData.entries()) {\n  //   dataParams[key] = Number(value);\n  // }\n\n  // let { delay, step, amount } = dataParams;\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayField","$47d4ff9957288465$var$stepField","$47d4ff9957288465$var$amountField","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","firstDelay","Number","value","delayStep","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.361f5d34.js.map"}